---
AWSTemplateFormatVersion: '2010-09-09'

Transform: 'AWS::Serverless-2016-10-31'

Description: Custom Step Functions template

Parameters:
  env:
    Type: String

  functionordereventName:
    Type: String

  functionordereventArn:
    Type: String

Resources:
  ProcessOrderStateMachine:
    Type: AWS::StepFunctions::StateMachine
    Properties:
      StateMachineName: !Sub "awsappsyncbookstore-processorder-${env}"
      RoleArn: !GetAtt ProcessOrderStateMachineRole.Arn
      DefinitionString: !Sub |
        {
          "Comment": "Submit order, validate, and send for shipment",
          "StartAt": "Persist order",
          "States": {
            "Persist order": {
              "Type": "Task",
              "Resource": "arn:aws:states:::dynamodb:putItem",
              "ResultPath": "$.prev",
              "Parameters": {
                "TableName.$": "$.orderTable",
                "Item": {
                  "id": { "S.$": "$.order.id" },
                  "customerId": { "S.$": "$.order.customerId" },
                  "orderDate": { "S.$":  "$.order.orderDate" },
                  "status": { "S": "RECEIVED" },
                  "items": { "L": [] },
                  "tax": { "N": "3.25" },
                  "shippingFee": { "N": "2.50" }
                }
              },
              "Next": "Handle items in order",
              "Catch": [{
                "ErrorEquals": [ "States.ALL" ],
                "ResultPath": "$.error",
                "Next": "HandleError"
              }]
            },
            "Handle items in order": {
              "Type": "Map",
              "InputPath": "$",
              "ItemsPath": "$.order.items",
              "ResultPath": "$.prev",
              "Parameters": {
                "cartItem.$": "$$.Map.Item.Value",
                "customerId.$": "$.order.customerId",
                "orderId.$": "$.order.id",
                "orderTable.$": "$.orderTable"
              },
              "Iterator": {
                "StartAt": "Append item to order",
                "States": {
                  "Append item to order": {
                    "Type": "Task",
                    "Resource": "arn:aws:states:::dynamodb:updateItem",
                    "Parameters": {
                      "TableName.$": "$.orderTable",
                      "Key": {
                        "id": { "S.$": "$.orderId" }
                      },
                      "UpdateExpression": "SET #i = list_append(#i, :item)",
                      "ExpressionAttributeNames": {
                        "#i": "items"
                      },
                      "ExpressionAttributeValues": {
                        ":item": {
                          "L": [{
                            "M": {
                              "bookId": { "S.$": "$.cartItem.bookId" },
                              "price": { "N.$": "$.cartItem.price" },
                              "quantity": { "N.$": "$.cartItem.quantity" }
                            }
                          }]
                        }
                      }
                    },
                    "Next": "Post-order processing",
                    "ResultPath": "$.prev"
                  },
                  "Post-order processing": {
                    "Type": "Task",
                    "Resource": "arn:aws:states:::lambda:invoke",
                    "Parameters": {
                      "FunctionName": "${functionordereventName}",
                      "Payload": {
                        "bookId.$": "$.cartItem.bookId",
                        "quantity.$": "$.cartItem.quantity",
                        "customerId.$": "$.customerId"
                      }
                    },
                    "End": true
                  }
                }
              },
              "Next": "Send for fulfillment"
            },
            "Send for fulfillment": {
              "Type": "Task",
              "Resource": "arn:aws:states:::sqs:sendMessage",
              "Parameters": {
                "QueueUrl": "${FulfillmentQueue}",
                "MessageBody.$": "$.order"
              },
              "Catch": [{
                "ErrorEquals": [ "States.ALL" ],
                "ResultPath": "$.error",
                "Next": "HandleError"
              }],
              "End": true
            },
            "HandleError": {
              "Type": "Fail",
              "Cause": "$.error"
            }
          }
        }

  ## Just keepig this here for convenience
  FulfillmentQueue:
    Type: AWS::SQS::Queue

  ProcessOrderStateMachineRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: !Sub states.${AWS::Region}.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        ## NOTE: Step Functions is granted permission to write to DDB table (OrderTable)
        ##       in the API stack to avoid circular dependency between this stack and API
        ##       where the DynamoDB table is actually created.
        - PolicyName: StatesExecutionPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - sqs:SendMessage
                Resource:
                  - !GetAtt FulfillmentQueue.Arn
        - PolicyName: StatesExecutionPolicy2
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - lambda:InvokeFunction
                Resource:
                  - !Ref functionordereventArn

Outputs:
  StateMachineArn:
    Description: ARN of Submit Order State Machine
    Value: !Ref ProcessOrderStateMachine
  
  StateMachineRole:
    Description: ARN of Submit Order State Machine Role
    Value: !Ref ProcessOrderStateMachineRole