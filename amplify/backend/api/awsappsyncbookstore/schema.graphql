type Book
  @model(subscriptions: null)
  # @searchable
  @key(name: "ByCategory", fields: [ "category" ], queryField: "booksByCategory")
  @auth(
    rules: [
      { allow: groups, groups: [ "Admin" ] }, # allow admin users to modify
      { allow: private, provider: iam } # allow backend to modify (e.g. lambda)
      { allow: public, provider: iam, operations: [ read ] } # allow public/unauth to read
    ]
  )
{
  id: ID!  # partition key
  isbn: String!
  author: String!
  category: String!  # index, GSI
  description: String
  image: String
  title: String!
  price: Float!
  rating: String
}

type CartItem
  @model
  @auth(
    rules: [
      { allow: owner },
      { allow: private, provider: iam, operations: [ read, delete ] }
    ]
  )
{
  id: ID!
  book: Book @connection @auth(rules: [ { allow: private, provider: userPools, operations: [ read ] } ])
  price: Float!
  quantity: Int!
  addedAt: AWSDateTime!
}

type Order
  @model(mutations: null)
  @key(name: "ByStatus" fields: [ "status", "orderDate" ], queryField: "ordersByStatus")
  @auth(
    rules: [
      { allow: owner, ownerField: "customerId", operations: [ read ] },
      { allow: private, provider: iam }
    ]
  )
{
  id: ID!
  customerId: ID
  orderDate: AWSDateTime!
  shipDate: AWSDateTime
  status: OrderStatus!
  items: [OrderItem]!
  tax: Float
  shippingFee: Float
}

input SubmitOrderInput {
  customerId: ID
  orderDate: AWSDateTime!
  items: [OrderItemInput]!
}

input UpdateOrderInput {
  id: ID!
  shipDate: AWSDateTime
  status: OrderStatus
  items: [OrderItemInput]
  tax: Float
  shippingFee: Float
}

type OrderItem {
  bookId: ID!
  price: Float!
  quantity: Int!
}

input OrderItemInput {
  bookId: ID!
  cartItemId: String!
  # strings for the following fields to accomodate downstream
  # processing of the order
  price: String!
  quantity: String!
}

enum OrderStatus {
  SUBMITTED
  RECEIVED
  PROCESSING
  SHIPPED
  COMPLETE
}

input FeedbackInput {
  email: String
  message: String!
}

type Feedback {
  id: ID!
  email: String
  message: String!
}

type BookConnection @aws_iam @aws_cognito_user_pools {
  items: [Book]
  nextToken: String
  totalCount: Int
}

type Query {
  # public access
  bestsellers(start: Int, end: Int): BookConnection
    @aws_iam
  recommendations(bookId: ID!): BookConnection
    @aws_iam @aws_cognito_user_pools
}

type Mutation {
  submitFeedback(input: FeedbackInput!): Feedback
  submitOrder(input: SubmitOrderInput!): Order
  # updateOrder is intended to be called by backend only
  updateOrder(input: UpdateOrderInput!): Order
    @aws_iam
}

type Subscription {
  onOrderUpdate(owner: String!, id: ID!): Order
    @aws_subscribe(mutations: [ "updateOrder" ])
}
